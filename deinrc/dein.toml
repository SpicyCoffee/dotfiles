[[plugins]]
repo = 'Shougo/dein.vim'

# toggle comments
[[plugins]]
repo = 'tomtom/tcomment_vim'

# snippet
[[plugins]]
repo = 'Shougo/neosnippet'
depends = ['neosnippet-snippets']
if = 'has("lua")'

[[plugins]]
repo = 'Shougo/neosnippet-snippets'
if = 'has("lua")'

[[plugins]]
repo = 'Shougo/neocomplete'
if = 'has("lua")'
hook_add = '''
  let g:neocomplete#enable_at_startup = 1  " activate neocomplete with start-up
  let g:neocomplete#enable_smart_case = 1
  let g:neocomplete#min_keyword_length = 3
  let g:neocomplete#enable_auto_delimiter = 1  " complete delimiter
  let g:neocomplete#auto_completion_start_length = 1  " display popup from 1 length
  " close popup by BackSpace key
  inoremap <expr><BS> neocomplete#smart_close_popup()."<C-h>"

  " decide word by Carriage Return key
  imap <expr><CR> neosnippet#expandable() ? "<Plug>(neosnippet_expand_or_jump)" : pumvisible() ? "<C-y>" : "<CR>"
  " choice words by TAB key
  imap <expr><TAB> pumvisible() ? "<C-n>" : neosnippet#jumpable() ? "<Plug>(neosnippet_expand_or_jump)" : "<TAB>"
'''

# support for html
[[plugins]]
repo = 'mattn/emmet-vim'
hook_add = '''
  let g:user_emmet_leader_key='<C-T>'
'''


# enhance status line information
[[plugins]]
repo = 'itchyny/lightline.vim'
hook_add = '''
  set laststatus=2  " always display status line
  set showmode
  set showcmd
  set ruler   " display cursor position
'''

# hilight blanks at line end
[[plugins]]
repo = 'bronson/vim-trailing-whitespace'

# display file tree
repo = 'scrooloose/nerdtree'
hook_add = '''
  nnoremap <silent><C-e> :NERDTreeToggle<CR>
'''

# check syntax
[[plugins]]
repo = 'scrooloose/syntastic'
hook_add = '''
  set statusline+=%#warningmsg#
  set statusline+=%{SyntasticStatuslineFlag()}
  set statusline+=%*

  let g:syntastic_always_populate_loc_list = 1  " stop conflict with other plugins
  let g:syntastic_auto_loc_list = 0  " hide error list
  let g:syntastic_check_on_open = 1  " check syntax when a file is opend
  let g:syntastic_check_on_wq = 0    " check syntax when ':wq'
'''

# operation about surrounding symbol
[[plugins]]
repo = 'tpope/vim-surround'

# commands for Rails
[[plugins]]
repo = 'tpope/vim-rails'

# additional syntax hilights
[[plugins]]
repo = 'hail2u/vim-css3-syntax'

[[plugins]]
repo = 'slim-template/vim-slim'
hook_add = '''
  autocmd BufRead,BufNewFile *.slim setfiletype slim
'''

# emoji
[[plugins]]
repo ='junegunn/vim-emoji'

[[plugins]]
repo = 'rhysd/github-complete.vim'
hook_add = '''
  set omnifunc=github_complete#complete
'''

# vim-tags
[[plugins]]
repo = 'szw/vim-tags'
hook_add = '''
  nnoremap <C-]> g<C-]>
'''

# ctrlp
[[plugins]]
repo = 'ctrlpvim/ctrlp.vim'
hook_add = '''
  let g:ctrlp_match_window = 'order:ttb,min:20,max:20,results:100'
  let g:ctrlp_show_hidden = 1
  let g:ctrlp_types = ['fil']
  let g:ctrlp_extensions = ['funky', 'commandline']
'''

[[plugins]]
repo = 'tacahiroy/ctrlp-funky'
depends = ['ctrlp']
hook_add = '''
  command! CtrlPCommandLine call ctrlp#init(ctrlp#commandline#id())
  let g:ctrlp_funky_matchtype = 'path'
'''

[[plugins]]
repo = 'suy/vim-ctrlp-commandline'
depends = ['ctrlp']

# fugitive
[[plugins]]
repo = 'tpope/vim-fugitive'

# coffee-script
[[plugins]]
repo = 'kchmck/vim-coffee-script'
hook_add = '''
  au BufRead,BufNewFile,BufReadPre *.coffee set filetype=coffee
  autocmd FileType coffee setlocal sw=2 sts=2 ts=2 et
  nnoremap <silent> <C-C> :CoffeeCompile vert <CR><C-w>h
'''

# syntax highlight in Ruby's heredoc
[[plugins]]
repo = 'joker1007/vim-ruby-heredoc-syntax'
# Add syntax rules
hook_add = '''
  let g:ruby_heredoc_syntax_filetypes = {
    \"sql" : {
    \  "start" : "SQL",
    \ },
  \}
'''

# markdown editor
[[plugins]]
repo = 'kannokanno/previm'
hook_add = '''
  let g:previm_open_cmd = 'open -a Google\ Chrome'
  augroup PrevimSettings
    autocmd!
    autocmd BufNewFile,BufRead *.{md,mdwn,mkd,mkdn,mark*} set filetype=markdown
  augroup END
'''

# jsonnet filetype plugin
[[plugins]]
repo = 'google/jsonnet'
